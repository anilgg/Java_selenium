package com.note;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class Timertrack {
WebDriver driver;
String vUrl,xlPath,xlSheet,xlPathRes;
int xRows,xCols;
String[][] xlData;
@Before
public void myBefore() throws Exception{
xlPath  = "C:/Users/anigan/Downloads/AnilAnnaProject.xls";
xlPathRes  = "C:/Users/anigan/Downloads/AnilAnnaProject_res.xls";
xlSheet = "AnilDataSheet";
xlData=readXL(xlPath,xlSheet);
}

@Test
public void myTest(){
for(int i = 1;i<xRows;i++){
vUrl = xlData[i][0];
    driver = new FirefoxDriver();
    driver.manage().window().maximize();
    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
    driver.get(vUrl);
    new WebDriverWait(driver, 10).until(ExpectedConditions.presenceOfElementLocated(By.xpath(".//*[@id='dvContent_4']/div[2]/table/tbody/tr[1]/td[3]")));
    // System.out.println(linkSearch.size());

    //if(input.size()!=0){
                String dateFrommethod = dateTimePicker();
                xlData[i][1] = dateFrommethod;
                //  }
                 driver.quit();
                }
}

@After
public void myAfter() throws Exception{
writeXL(xlPath, "TCResult", xlData);

}
public String dateTimePicker(){

DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
Date date = new Date();
String date1= dateFormat.format(date);
return date1;
}

// Method to write into an XL
public void writeXL(String sPath, String iSheet, String[][] xData)
throws Exception{

    File outFile = new File(sPath);
       HSSFWorkbook wb = new HSSFWorkbook();
       HSSFSheet osheet = wb.createSheet(iSheet);
       int xR_TS = xData.length;
       int xC_TS = xData[0].length;
    for (int myrow = 0; myrow < xR_TS; myrow++) {
       HSSFRow row = osheet.createRow(myrow);
       for (int mycol = 0; mycol < xC_TS; mycol++) {
        HSSFCell cell = row.createCell(mycol);
        cell.setCellType(HSSFCell.CELL_TYPE_STRING);
        cell.setCellValue(xData[myrow][mycol]);
       }
       FileOutputStream fOut = new FileOutputStream(outFile);
       wb.write(fOut);
       fOut.flush();
       fOut.close();
    }
}
// Method to read XL
public String[][] readXL(String sPath, String iSheet) throws Exception{
String[][] xData;

File myxl = new File(sPath);
FileInputStream myStream = new FileInputStream(myxl);
HSSFWorkbook myWB = new HSSFWorkbook(myStream);
HSSFSheet mySheet = myWB.getSheet(iSheet);
xRows = mySheet.getLastRowNum()+1;
xCols = mySheet.getRow(0).getLastCellNum();
xData = new String[xRows][xCols];
for (int i = 0; i < xRows; i++) {
HSSFRow row = mySheet.getRow(i);
for (int j = 0; j < xCols; j++) {
HSSFCell cell = row.getCell(j);
String value = "-";
if (cell!=null){
value = cellToString(cell);
}
xData[i][j] = value;
//System.out.println(value);
//System.out.print("--");
}
}
return xData;
}
//Change cell type
public static String cellToString(HSSFCell cell) {
// This function will convert an object of type excel cell to a string value
int type = cell.getCellType();
Object result;
switch (type) {
case HSSFCell.CELL_TYPE_NUMERIC: //0
result = cell.getNumericCellValue();
break;
case HSSFCell.CELL_TYPE_STRING: //1
result = cell.getStringCellValue();
break;
case HSSFCell.CELL_TYPE_BLANK: //3
result = "%";
break;
default:
throw new RuntimeException("We don't support this cell type: " + type);
}
return result.toString();
}
}