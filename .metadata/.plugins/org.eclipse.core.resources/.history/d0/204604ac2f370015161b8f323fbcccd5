package selenium.core;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Hashtable;

import org.apache.james.mime4j.field.address.parser.ASTangle_addr;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.AreaReference;
import org.apache.poi.hssf.util.CellReference;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Name;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

public class TestData {
	
	public static final String DEFAULT_SEPERATOR = "//";
	public boolean isTable = false;
	
	private static String commanSheet = "commaon";
	private Hashtable<String, ArrayList<String>> internalData = null;
	
	private TestData(Hashtable<String,ArrayList<String>> internalData, boolean isTable){
		this.internalData = internalData;
		this.isTable=isTable;
	}
	
	public String toString(){
		return internalData.toString();
	}
	
	public static String getCommonSheet(){
		return TestData.commanSheet;
	}
	
	public static void setCoomonsheet(String sheetName){
		TestData.commanSheet=sheetName;
	}
	
	
	public static String getAbsoluteTestDataPath(String fileName) throws IOException{
		File tmpFile = new File(fileName);
		if(!tmpFile.isAbsolute()){
			File tmpDir = new File("." + File.separator + Config.getCurrentProjectName() + File.separator + "testdata" + File.separator);
			if(!tmpDir.exists()){
				tmpDir = new File("." + File.separator + "testdata" + File.separator);
			}
			fileName = tmpDir.getCanonicalPath() + File.separator + fileName;
		}
		return fileName;
	}
	
	public static TestData getTestData(){
		return getTestData("TestData");
	}
	
	public static TestData getTestData(String tableName){
		return getTestData(Config.getCurrentRequirementName() + ".xls", tableName);
		
	}
	
	public static TestData getTestData(String filename, String tablename){
		Hashtable<String, ArrayList<String>> tmpInternalData = getInternalTestDataTable(filename, tablename, false);
		return new TestData(tmpInternalData,false);
	}
	
	/**
	 * To get test data table
	 */
	private static Hashtable<String, ArrayList<String>> getInternalTestDataTable(String filename, String tablename, boolean asTable){
		Hashtable<String, ArrayList<String>> localData = getInternalTestDataTableOnSheet(filename, Config.getCurrentTestName(), tablename, asTable);
		Hashtable<String, ArrayList<String>> commonData = getInternalTestDataTableOnSheet(filename, getCommonSheet(), tablename, asTable);
		Hashtable<String, ArrayList<String>> result = null;
		if(asTable){
			result = CustomListener.getBatchMode() ? commonData : localData;
			if(result.isEmpty()){
				result = CustomListener.getBatchMode() ? commonData : localData;
			}
		}else{
			result = CustomListener.getBatchMode() ? commonData : localData;
			result.putAll(CustomListener.getBatchMode() ? commonData : localData);
		}
		if(result.isEmpty()){
		}
		return result;
	}

	private static Hashtable<String,ArrayList<String>> getInternalTestDataTableOnSheet(String fileName, String sheetName, String tableName, Boolean asTable){
		Hashtable<String, ArrayList<String>> result = new Hashtable<String, ArrayList<String>>();
		InputStream testDataExel = null;
		try{
			testDataExel = new FileInputStream(getAbsoluteTestDataPath(fileName));
			Workbook wb = new HSSFWorkbook(testDataExel);
			Name namedRange = getNamedRangeForSheet(wb, sheetName, tableName);
			if(namedRange!=null){
				if(asTable){
					result = getAsTable(wb, namedRange);
				}
			}
			
		}catch(Exception e){
			
		}
		
		
	}
	
	private static Name getNamedRangeForSheet(Workbook wb, String sheetName, String tableName){
		int nameRangesCount = wb.getNumberOfNames();
		Name tempRangeName;
		Name resultNameRange = null;
		String tempLabel;
		String tempSheetName;
		for(int i=0; i<nameRangesCount; i++){
			tempRangeName = wb.getNameAt(i);
			tempSheetName = tempRangeName.getSheetName();
			if(tempSheetName.equals(sheetName)){
				tempLabel = tempRangeName.getNameName();
				if(tempLabel.equals(tableName)){
					resultNameRange = tempRangeName;
					break;
				}
			}
		}
		return resultNameRange;
	}
	
	private static Hashtable<String, ArrayList<String>> getAsTable(Workbook wb, Name namedRange) {
		Hashtable<String, ArrayList<String>> result = new Hashtable<String, ArrayList<String>>();

		AreaReference areaRef = new AreaReference(namedRange.getRefersToFormula());
		org.apache.poi.ss.util.CellReference[] cellRef = areaRef.getAllReferencedCells();
		Sheet currentSheet = wb.getSheet(cellRef[0].getSheetName());
		FormulaEvaluator evaluator = wb.getCreationHelper().createFormulaEvaluator();
		int firstRow = cellRef[0].getRow();

		Hashtable<Short, String> headers = new Hashtable<Short, String>();

		int currentRow = firstRow;
		short i = 0;
		while (currentRow == firstRow) {
			Row row = currentSheet.getRow(currentRow);
			Cell cell = row.getCell(cellRef[i].getCol());
			headers.put(cellRef[i].getCol(), getCellValue(cell, evaluator));
			result.put(getCellValue(cell, evaluator), new ArrayList<String>());
			i++;
			currentRow = cellRef[i].getRow();
		}

		currentRow = -1;
		for (int j = 0; j < cellRef.length; j++) {
			int actualRow = cellRef[j].getRow();
			if (actualRow > firstRow) {
				Row row = currentSheet.getRow(actualRow);
				if (row != null) {
					Short colIndex = cellRef[j].getCol();
					Cell cell = row.getCell(colIndex);
					String cellValue = getCellValue(cell, evaluator);
					String colHeader = headers.get(colIndex);
					result.get(colHeader).add(cellValue);
				}
			}
		}
		return result;
	}
	
}


	
	
	

